@page "/products"
@page "/products/{categoryId}"

<div class="container py-4">
    <h1 class="mb-4">สินค้า</h1>

    <div class="row">
        <!-- Filters Sidebar -->
        <div class="col-md-3">
            <div class="filter-section">
                <div class="mb-3">
                    <button class="btn btn-link text-primary p-0 mb-2" @onclick="ClearFilters">ล้างทั้งหมด</button>
                </div>

                <div class="mb-4">
                    <h5 class="mb-3">ราคา</h5>
                    <div class="d-flex gap-2 mb-2">
                        <input type="number" id="minPrice" class="form-control" placeholder="0.00" min="0"
                               value="@minPriceString" @oninput="OnMinPriceChange" />
                        <input type="number" id="maxPrice" class="form-control" placeholder="0.00" min="0"
                               value="@maxPriceString" @oninput="OnMaxPriceChange" />
                    </div>
                </div>

                <div class="mb-4">
                    <h5 class="mb-3">ประเภท</h5>
                    @foreach (var category in categories)
                    {
                        <div class="form-check mb-2">
                            <input class="form-check-input" type="checkbox" id="@category.Id" checked="@category.Selected" @onchange="(e) => OnCategoryChange(category.Id, e.Value)" />
                            <label class="form-check-label" for="@category.Id">@category.Name</label>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Products Grid -->
        <div class="col-md-9">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <div class="search-box">
                    <input type="text" class="form-control" placeholder="ค้นหาสินค้า..." value="@searchQuery" @oninput="OnSearchChange" />
                </div>
                <div class="d-flex align-items-center gap-2">
                    <span>จัดเรียงโดย</span>
                    <select class="form-select" value="@sortOrder" @onchange="OnSortChange">
                        <option value="latest">ล่าสุด</option>
                        <option value="price-asc">ราคา ต่ำ-สูง</option>
                        <option value="price-desc">ราคา สูง-ต่ำ</option>
                    </select>
                </div>
            </div>

            <div class="row g-4">
                @foreach (var product in filteredProducts)
                {
                    <div class="col-md-4">
                        <div class="product-card">
                            <img src="@product.ImageUrl" class="product-image" alt="@product.Name" />
                            <div class="product-info">
                                <h3 class="product-title">@product.Name</h3>
                                <div class="d-flex justify-content-between align-items-center">
                                    <span class="product-price">฿@product.Price.ToString("F2")</span>
                                    <button class="btn btn-primary">เพิ่มลงตะกร้าสินค้า</button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private string minPriceString;
    private string maxPriceString;

    [Parameter]
    public string CategoryId { get; set; }

    
    private List<Category> categories = new()
    {
        new Category("1", "เหล็กเส้น"),
        new Category("2", "เหล็กแผ่น"),
        new Category("3", "เหล็กรูปพรรณ"),
        new Category("4", "เหล็กตะแกรง/ตาข่าย"),
        new Category("5", "อื่นๆ")
    };

    private  List<Product> products = new()
    {
        new Product("1", "เหล็กเส้น", 100.00M, "/images/steel-bars.png", "1"),
        new Product("2", "เหล็กแผ่น", 200.00M, "/images/steel-sheets.png", "2"),
        new Product("3", "เหล็กรูปพรรณ", 150.00M, "/images/steel-profiles.png", "3"),
        new Product("4", "เหล็กตะแกรง", 120.00M, "/images/steel-mesh.png", "4"),
        new Product("5", "อื่นๆ", 180.00M, "/images/other-steel.png", "5")
    };

    private List<Product> filteredProducts;
    private string searchQuery = string.Empty;
    private decimal minPrice = 0;
    private decimal maxPrice = decimal.MaxValue;
    private string sortOrder = "latest";

    protected override void OnInitialized()
    {
        // Initial setup for price range
        if (products.Any())
        {
            // Default price range is for all products
            minPrice = products.Min(p => p.Price);
            maxPrice = products.Max(p => p.Price);
        }

        // Select the category if specified in the URL
        if (!string.IsNullOrEmpty(CategoryId))
        {
            var category = categories.FirstOrDefault(c => c.Id == CategoryId);
            if (category != null)
            {
                category.Selected = true;

                // Get products for this category only
                var categoryProducts = products.Where(p => p.CategoryId == CategoryId).ToList();

                // Set min and max price based on products in this category
                if (categoryProducts.Any())
                {
                    minPrice = categoryProducts.Min(p => p.Price);
                    maxPrice = categoryProducts.Max(p => p.Price);
                }
            }
        }

        // Update the string representations
        minPriceString = minPrice.ToString("F2");
        maxPriceString = maxPrice.ToString("F2");

        FilterProducts();
    }

    private void FilterProducts()
    {
        filteredProducts = products
            .Where(p =>
                (string.IsNullOrEmpty(searchQuery) || p.Name.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)) &&
                p.Price >= minPrice && p.Price <= maxPrice &&
                (categories.Any(c => c.Selected && c.Id == p.CategoryId) || !categories.Any(c => c.Selected)))
            .ToList();

        switch (sortOrder)
        {
            case "price-asc":
                filteredProducts = filteredProducts.OrderBy(p => p.Price).ToList();
                break;
            case "price-desc":
                filteredProducts = filteredProducts.OrderByDescending(p => p.Price).ToList();
                break;
            case "latest":
                filteredProducts = filteredProducts.OrderByDescending(p => p.Name).ToList();
                break;
        }
    }

    private void ClearFilters()
    {
        if (products.Any())
        {
            minPrice = products.Min(p => p.Price);
            maxPrice = products.Max(p => p.Price);
        }

        minPriceString = minPrice.ToString("F2");
        maxPriceString = maxPrice.ToString("F2");

        searchQuery = string.Empty;

        foreach (var category in categories)
        {
            category.Selected = false;
        }

        FilterProducts();
    }



    private void OnSearchChange(ChangeEventArgs e)
    {
        searchQuery = e.Value.ToString();
        FilterProducts();
    }

    private void OnSortChange(ChangeEventArgs e)
    {
        sortOrder = e.Value.ToString();
        FilterProducts();
    }

    private void OnCategoryChange(string categoryId, object selected)
    {
        var selectedCategory = categories.FirstOrDefault(c => c.Id == categoryId);
        if (selectedCategory != null)
        {
            selectedCategory.Selected = (bool)selected;
            FilterProducts();
        }
    }

    private void OnMinPriceChange(ChangeEventArgs e)
    {
        minPriceString = e.Value?.ToString() ?? "0";
        if (decimal.TryParse(minPriceString, out var value))
        {
            minPrice = value;
            FilterProducts();
        }
    }

    private void OnMaxPriceChange(ChangeEventArgs e)
    {
        maxPriceString = e.Value?.ToString() ?? "0";
        if (decimal.TryParse(maxPriceString, out var value))
        {
            maxPrice = value;
            FilterProducts();
        }
    }


    public record Category(string Id, string Name) { public bool Selected { get; set; } }
    public record Product(string Id, string Name, decimal Price, string ImageUrl, string CategoryId);
}


<style>
    .filter-section {
        background-color: #fff;
        padding: 1.5rem;
        border-radius: 0.5rem;
        box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    }

    .product-card {
        background: white;
        border-radius: 0.5rem;
        overflow: hidden;
        box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        transition: transform 0.2s ease-in-out;
    }

        .product-card:hover {
            transform: translateY(-2px);
        }

    .product-image {
        width: 100%;
        height: 200px;
        object-fit: contain;
        background-color: #f8f9fa;
        padding: 1rem;
    }

    .product-info {
        padding: 1rem;
    }

    .product-title {
        font-size: 1rem;
        margin-bottom: 1rem;
        color: #1a1a1a;
    }

    .product-price {
        font-size: 1.25rem;
        font-weight: 600;
        color: #6366F1;
    }

    .btn-primary {
        background-color: #6366F1;
        border-color: #6366F1;
        font-size: 0.875rem;
        padding: 0.5rem 1rem;
    }

        .btn-primary:hover {
            background-color: #4F46E5;
            border-color: #4F46E5;
        }

    .form-check-input:checked {
        background-color: #6366F1;
        border-color: #6366F1;
    }
</style>
