@page "/inventory"

<div class="inventory-page">
    <div class="page-header">
        <h1>Steel Inventory Management</h1>
        <div class="actions">
            <button class="btn btn-primary" @onclick="OpenAddItemModal">Add New Item</button>
            <button class="btn btn-secondary" @onclick="ExportInventory">Export</button>
        </div>
    </div>

    <div class="filters">
        <div class="filter-group">
            <label for="categoryFilter">Category:</label>
            <select id="categoryFilter" @bind="SelectedCategory">
                <option value="">All Categories</option>
                <option value="Structural">Structural</option>
                <option value="Reinforcement">Reinforcement</option>
                <option value="Plates">Plates</option>
                <option value="Sheets">Sheets</option>
                <option value="Pipes">Pipes</option>
            </select>
        </div>
        <div class="filter-group">
            <label for="stockFilter">Stock Level:</label>
            <select id="stockFilter" @bind="StockFilter">
                <option value="">All</option>
                <option value="Low">Low Stock</option>
                <option value="OutOfStock">Out of Stock</option>
                <option value="Available">Available</option>
            </select>
        </div>
        <div class="filter-group">
            <label for="searchFilter">Search:</label>
            <input type="text" id="searchFilter" @bind="SearchQuery" placeholder="Search by name or ID..." />
        </div>
        <button class="btn btn-primary" @onclick="ApplyFilters">Apply Filters</button>
        <button class="btn btn-outline-secondary" @onclick="ResetFilters">Reset</button>
    </div>

    <table class="inventory-table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Item Name</th>
                <th>Category</th>
                <th>Dimensions</th>
                <th>Grade</th>
                <th>Current Stock</th>
                <th>Unit</th>
                <th>Price/Unit</th>
                <th>Location</th>
                <th>Status</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in InventoryItems)
            {
                <tr class="@(item.CurrentStock < item.ReorderLevel ? "low-stock" : "")">
                    <td>@item.Id</td>
                    <td>@item.Name</td>
                    <td>@item.Category</td>
                    <td>@item.Dimensions</td>
                    <td>@item.Grade</td>
                    <td>@item.CurrentStock</td>
                    <td>@item.Unit</td>
                    <td>$@item.PricePerUnit.ToString("N2")</td>
                    <td>@item.Location</td>
                    <td>
                        @if (item.CurrentStock <= 0)
                        {
                            <span class="status out-of-stock">Out of Stock</span>
                        }
                        else if (item.CurrentStock < item.ReorderLevel)
                        {
                            <span class="status low-stock">Low Stock</span>
                        }
                        else
                        {
                            <span class="status available">Available</span>
                        }
                    </td>
                    <td>
                        <div class="btn-group">
                            <button class="btn btn-sm btn-primary" @onclick="() => EditItem(item.Id)">Edit</button>
                            <button class="btn btn-sm btn-warning" @onclick="() => ManageStock(item.Id)">Stock</button>
                            <button class="btn btn-sm btn-danger" @onclick="() => DeleteItem(item.Id)">Delete</button>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <div class="pagination">
        <button class="btn btn-sm btn-outline-primary" @onclick="PreviousPage" disabled="@(CurrentPage == 1)">Previous</button>
        <span>Page @CurrentPage of @TotalPages</span>
        <button class="btn btn-sm btn-outline-primary" @onclick="NextPage" disabled="@(CurrentPage == TotalPages)">Next</button>
    </div>
</div>

@code {
    private List<InventoryItemDetailViewModel> InventoryItems { get; set; } = new List<InventoryItemDetailViewModel>();
    private string SelectedCategory { get; set; } = "";
    private string StockFilter { get; set; } = "";
    private string SearchQuery { get; set; } = "";
    private int CurrentPage { get; set; } = 1;
    private int TotalPages { get; set; } = 5;

    protected override void OnInitialized()
    {
        LoadInventory();
    }

    private void LoadInventory()
    {
        // In a real application, this would come from a service or API
        InventoryItems = new List<InventoryItemDetailViewModel>
        {
            new InventoryItemDetailViewModel { Id = 101, Name = "Steel Beam (I-Beam)", Category = "Structural", Dimensions = "200mm x 100mm", Grade = "A36", CurrentStock = 25.5m, Unit = "tons", PricePerUnit = 850.00m, Location = "Warehouse A", ReorderLevel = 50.0m },
            new InventoryItemDetailViewModel { Id = 102, Name = "Rebar 12mm", Category = "Reinforcement", Dimensions = "12mm x 12m", Grade = "Grade 60", CurrentStock = 15.2m, Unit = "tons", PricePerUnit = 750.00m, Location = "Warehouse B", ReorderLevel = 30.0m },
            new InventoryItemDetailViewModel { Id = 103, Name = "Steel Plate 10mm", Category = "Plates", Dimensions = "1.2m x 2.4m x 10mm", Grade = "A572", CurrentStock = 10.8m, Unit = "tons", PricePerUnit = 920.00m, Location = "Warehouse A", ReorderLevel = 20.0m },
            new InventoryItemDetailViewModel { Id = 104, Name = "Angle Iron 50mm", Category = "Structural", Dimensions = "50mm x 50mm x 5mm", Grade = "A36", CurrentStock = 8.5m, Unit = "tons", PricePerUnit = 780.00m, Location = "Warehouse C", ReorderLevel = 15.0m },
            new InventoryItemDetailViewModel { Id = 105, Name = "Galvanized Sheet 2mm", Category = "Sheets", Dimensions = "1.2m x 2.4m x 2mm", Grade = "G90", CurrentStock = 5.2m, Unit = "tons", PricePerUnit = 980.00m, Location = "Warehouse B", ReorderLevel = 10.0m },
            new InventoryItemDetailViewModel { Id = 106, Name = "H-Beam 300mm", Category = "Structural", Dimensions = "300mm x 150mm", Grade = "A992", CurrentStock = 45.0m, Unit = "tons", PricePerUnit = 890.00m, Location = "Warehouse A", ReorderLevel = 40.0m },
            new InventoryItemDetailViewModel { Id = 107, Name = "Steel Pipe 4 inch", Category = "Pipes", Dimensions = "4 inch x 6m", Grade = "A53", CurrentStock = 30.5m, Unit = "tons", PricePerUnit = 820.00m, Location = "Warehouse C", ReorderLevel = 25.0m },
            new InventoryItemDetailViewModel { Id = 108, Name = "Checker Plate 5mm", Category = "Plates", Dimensions = "1.5m x 3m x 5mm", Grade = "A786", CurrentStock = 18.2m, Unit = "tons", PricePerUnit = 910.00m, Location = "Warehouse B", ReorderLevel = 15.0m },
            new InventoryItemDetailViewModel { Id = 109, Name = "Square Tube 40mm", Category = "Structural", Dimensions = "40mm x 40mm x 3mm", Grade = "A500", CurrentStock = 22.7m, Unit = "tons", PricePerUnit = 845.00m, Location = "Warehouse A", ReorderLevel = 20.0m },
            new InventoryItemDetailViewModel { Id = 110, Name = "Circular Steel Bar 25mm", Category = "Reinforcement", Dimensions = "25mm diameter", Grade = "AISI 1045", CurrentStock = 12.3m, Unit = "tons", PricePerUnit = 795.00m, Location = "Warehouse C", ReorderLevel = 10.0m }
        };
    }

    private void ApplyFilters()
    {
        // Filter implementation would go here
        // Reset to first page when applying filters
        CurrentPage = 1;
    }

    private void ResetFilters()
    {
        SelectedCategory = "";
        StockFilter = "";
        SearchQuery = "";
        CurrentPage = 1;
        LoadInventory();
    }

    private void OpenAddItemModal()
    {
        // Show modal for adding new inventory item
    }

    private void ExportInventory()
    {
        // Export inventory to Excel or PDF
    }

    private void EditItem(int id)
    {
        // Navigate to edit page or show edit modal
    }

    private void ManageStock(int id)
    {
        // Show stock management modal for transactions
    }

    private void DeleteItem(int id)
    {
        // Confirm and delete item
    }

    private void PreviousPage()
    {
        if (CurrentPage > 1)
            CurrentPage--;
    }

    private void NextPage()
    {
        if (CurrentPage < TotalPages)
            CurrentPage++;
    }

    public class InventoryItemDetailViewModel
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string Category { get; set; }
        public string Dimensions { get; set; }
        public string Grade { get; set; }
        public decimal CurrentStock { get; set; }
        public string Unit { get; set; }
        public decimal PricePerUnit { get; set; }
        public string Location { get; set; }
        public decimal ReorderLevel { get; set; }
    }
}