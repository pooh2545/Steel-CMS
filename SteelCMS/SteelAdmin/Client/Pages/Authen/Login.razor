@page "/login"
@using SteelAdmin.Client
@using SteelAdmin.Shared
@using System.ComponentModel.DataAnnotations
@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
@inject IUserService UserService

<div class="login-container">
    <div class="login-card">
        <div class="login-header">
            <h2>เข้าสู่ระบบ</h2>
        </div>

        <div class="login-body">
            <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
                <DataAnnotationsValidator />

                @if (errorMessage != null)
                {
                    <div class="alert alert-danger">
                        @errorMessage
                    </div>
                }

                <div class="form-group">
                    <label for="username">ชื่อผู้ใช้</label>
                    <InputText id="username" @bind-Value="loginModel.Username" class="form-control" />
                    <ValidationMessage For="@(() => loginModel.Username)" />
                </div>

                <div class="form-group">
                    <label for="password">รหัสผ่าน</label>
                    <InputText type="password" id="password" @bind-Value="loginModel.Password" class="form-control" />
                    <ValidationMessage For="@(() => loginModel.Password)" />
                </div>

                <div class="form-group">
                    <button type="submit" class="btn btn-primary btn-block" disabled="@isLoading">
                        @if (isLoading)
                        {
                            <span>กำลังเข้าสู่ระบบ...</span>
                        }
                        else
                        {
                            <span>เข้าสู่ระบบ</span>
                        }
                    </button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private LoginModel loginModel = new LoginModel();
    private string errorMessage;
    private bool isLoading = false;

    private async Task HandleLogin()
    {
        isLoading = true;
        errorMessage = null;

        try
        {
            // ในระบบจริง คุณควรส่งคำขอไปยัง API เพื่อตรวจสอบการเข้าสู่ระบบ
            // นี่เป็นเพียงตัวอย่าง
            var result = await UserService.LoginAsync(loginModel.Username, loginModel.Password);

            if (result.Success)
            {
                await LocalStorage.SetItemAsync("authToken", result.Token);
                await LocalStorage.SetItemAsync("userName", loginModel.Username);
                await LocalStorage.SetItemAsync("userRole", result.Role);

                var authStateProvider = (CustomAuthStateProvider)AuthStateProvider;
                authStateProvider.MarkUserAsAuthenticated(loginModel.Username, result.Role);

                NavigationManager.NavigateTo("/");
            }
            else
            {
                errorMessage = "ชื่อผู้ใช้หรือรหัสผ่านไม่ถูกต้อง";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"เกิดข้อผิดพลาด: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "กรุณาระบุชื่อผู้ใช้")]
        public string Username { get; set; }

        [Required(ErrorMessage = "กรุณาระบุรหัสผ่าน")]
        public string Password { get; set; }
    }
}