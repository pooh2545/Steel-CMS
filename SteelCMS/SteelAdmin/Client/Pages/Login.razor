@page "/login"
@using SteelAdmin.Client.Services
@using SteelAdmin.Shared
@inject AuthService AuthService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<div class="login-container">
    <div class="login-card">
        <div class="login-header">
            <h2>เข้าสู่ระบบจัดการเหล็ก</h2>
            <p>กรุณาเข้าสู่ระบบเพื่อเข้าถึงระบบจัดการ</p>
        </div>

        <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="username">ชื่อผู้ใช้:</label>
                <InputText id="username" @bind-Value="loginModel.Username" class="form-control" />
                <ValidationMessage For="@(() => loginModel.Username)" />
            </div>

            <div class="form-group">
                <label for="password">รหัสผ่าน:</label>
                <InputText id="password" type="password" @bind-Value="loginModel.Password" class="form-control" />
                <ValidationMessage For="@(() => loginModel.Password)" />
            </div>

            <div class="form-check">
                <InputCheckbox id="rememberMe" @bind-Value="loginModel.RememberMe" class="form-check-input" />
                <label class="form-check-label" for="rememberMe">จดจำฉัน</label>
            </div>

            <button type="submit" class="btn btn-primary btn-block" disabled="@isLoggingIn">
                @if (isLoggingIn)
                {
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    <span>กำลังเข้าสู่ระบบ...</span>
                }
                else
                {
                    <span>เข้าสู่ระบบ</span>
                }
            </button>
        </EditForm>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger mt-3">
                @errorMessage
            </div>
        }
    </div>
</div>

@code {
    private LoginModel loginModel = new LoginModel();
    private bool isLoggingIn = false;
    private string errorMessage = string.Empty;

    private async Task HandleLogin()
    {
        isLoggingIn = true;
        errorMessage = string.Empty;

        try
        {
            var result = await AuthService.Login(loginModel);
            if (result.Successful)
            {
                NavigationManager.NavigateTo("/dashboard");
            }
            else
            {
                errorMessage = result.Error ?? "เกิดข้อผิดพลาดในการเข้าสู่ระบบ";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "เกิดข้อผิดพลาดในการเชื่อมต่อกับเซิร์ฟเวอร์";
            await JSRuntime.InvokeVoidAsync("console.error", ex.Message);
        }
        finally
        {
            isLoggingIn = false;
        }
    }
}